syntax = "proto3";

package proxywasm.attributes;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

message StringMapEntry {
    string key = 1;
    bytes value = 2;
}


message StringMap {
    repeated StringMapEntry map = 1;
}

message Metadata {
    // Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
    // namespace is reserved for Envoy's built-in filters.
    // If both ``filter_metadata`` and
    // :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>`
    // fields are present in the metadata with same keys,
    // only ``typed_filter_metadata`` field will be parsed.
    map<string, google.protobuf.Struct> filter_metadata = 1;
  
    // Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
    // namespace is reserved for Envoy's built-in filters.
    // The value is encoded as google.protobuf.Any.
    // If both :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>`
    // and ``typed_filter_metadata`` fields are present in the metadata with same keys,
    // only ``typed_filter_metadata`` field will be parsed.
    map<string, google.protobuf.Any> typed_filter_metadata = 2;
}

message Locality {
    // Region this :ref:`zone <envoy_v3_api_field_config.core.v3.Locality.zone>` belongs to.
    string region = 1;
  
    // Defines the local service zone where Envoy is running. Though optional, it
    // should be set if discovery service routing is used and the discovery
    // service exposes :ref:`zone data <envoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,
    // either in this message or via :option:`--service-zone`. The meaning of zone
    // is context dependent, e.g. `Availability Zone (AZ)
    // <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
    // on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
    // GCP, etc.
    string zone = 2;
  
    // When used for locality of upstream hosts, this field further splits zone
    // into smaller chunks of sub-zones so they can be load balanced
    // independently.
    string sub_zone = 3;
}

message SemanticVersion {
    uint32 major_number = 1;
  
    uint32 minor_number = 2;
  
    uint32 patch = 3;
}

message BuildVersion {
    // SemVer version of extension.
    SemanticVersion version = 1;
  
    // Free-form build information.
    // Envoy defines several well known keys in the source/common/version/version.h file
    google.protobuf.Struct metadata = 2;
}

message Extension {
    // This is the name of the Envoy filter as specified in the Envoy
    // configuration, e.g. envoy.filters.http.router, com.acme.widget.
    string name = 1;
  
    // Category of the extension.
    // Extension category names use reverse DNS notation. For instance "envoy.filters.listener"
    // for Envoy's built-in listener filters or "com.acme.filters.http" for HTTP filters from
    // acme.com vendor.
    string category = 2;
  
    // [#not-implemented-hide:] Type descriptor of extension configuration proto.
    string type_descriptor = 3;
  
    // The version is a property of the extension and maintained independently
    // of other extensions and the Envoy API.
    // This field is not set when extension did not provide version information.
    BuildVersion version = 4;
  
    // Indicates that the extension is present but was disabled via dynamic configuration.
    bool disabled = 5;
  
    // Type URLs of extension configuration protos.
    repeated string type_urls = 6;
}

message Pipe {
    // Unix Domain Socket path. On Linux, paths starting with '@' will use the
    // abstract namespace. The starting '@' is replaced by a null byte by Envoy.
    // Paths starting with '@' will result in an error in environments other than
    // Linux.
    string path = 1;
  
    // The mode for the Pipe. Not applicable for abstract sockets.
    uint32 mode = 2;
}

message EnvoyInternalAddress {
    oneof address_name_specifier {
      // Specifies the :ref:`name <envoy_v3_api_field_config.listener.v3.Listener.name>` of the
      // internal listener.
      string server_listener_name = 1;
    }
  
    // Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a
    // single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for
    // example, may be set to the final destination IP for the target internal listener.
    string endpoint_id = 2;
}

message SocketAddress {
    enum Protocol {
      TCP = 0;
      UDP = 1;
    }
  
    Protocol protocol = 1;
  
    // The address for this socket. :ref:`Listeners <config_listeners>` will bind
    // to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
    // to bind to any address.
    string address = 2;
  
    oneof port_specifier {
      uint32 port_value = 3;
  
      // This is only valid if :ref:`resolver_name
      // <envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name>` is specified below and the
      // named resolver is capable of named port resolution.
      string named_port = 4;
    }
  
    // The name of the custom resolver. This must have been registered with Envoy. If
    // this is empty, a context dependent default applies. If the address is a concrete
    // IP address, no resolution will occur. If address is a hostname this
    // should be set for resolution other than DNS. Specifying a custom resolver with
    // ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
    string resolver_name = 5;
  
    // When binding to an IPv6 address above, this enables `IPv4 compatibility
    // <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will
    // allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
    // IPv6 space as ``::FFFF:<IPv4-address>``.
    bool ipv4_compat = 6;
}  

message Address {
    oneof address {
      SocketAddress socket_address = 1;
  
      Pipe pipe = 2;
  
      // Specifies a user-space address handled by :ref:`internal listeners
      // <envoy_v3_api_field_config.listener.v3.Listener.internal_listener>`.
      EnvoyInternalAddress envoy_internal_address = 3;
    }
  }

message Node {
    reserved 5;
    reserved "build_version";
  
    // An opaque node identifier for the Envoy node. This also provides the local
    // service node name. It should be set if any of the following features are
    // used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS
    // <config_cluster_manager_cds>`, and :ref:`HTTP tracing
    // <arch_overview_tracing>`, either in this message or via
    // :option:`--service-node`.
    string id = 1;
  
    // Defines the local service cluster name where Envoy is running. Though
    // optional, it should be set if any of the following features are used:
    // :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster
    // verification
    // <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher>`,
    // :ref:`runtime override directory <envoy_v3_api_msg_config.bootstrap.v3.Runtime>`,
    // :ref:`user agent addition
    // <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent>`,
    // :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,
    // :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing
    // <arch_overview_tracing>`, either in this message or via
    // :option:`--service-cluster`.
    string cluster = 2;
  
    // Opaque metadata extending the node identifier. Envoy will pass this
    // directly to the management server.
    google.protobuf.Struct metadata = 3;
  
    // Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike
    // other fields in this message). For example, the xDS client may have a shard identifier that
    // changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the
    // dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic
    // parameter then appears in this field during future discovery requests.
    map<string, StringMap> dynamic_parameters = 12;
  
    // Locality specifying where the Envoy instance is running.
    Locality locality = 4;
  
    // Free-form string that identifies the entity requesting config.
    // E.g. "envoy" or "grpc"
    string user_agent_name = 6;
  
    oneof user_agent_version_type {
      // Free-form string that identifies the version of the entity requesting config.
      // E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
      string user_agent_version = 7;
  
      // Structured version of the entity requesting config.
      BuildVersion user_agent_build_version = 8;
    }
  
    // List of extensions and their versions supported by the node.
    repeated Extension extensions = 9;
  
    // Client feature support list. These are well known features described
    // in the Envoy API repository for a given major version of an API. Client features
    // use reverse DNS naming scheme, for example ``com.acme.feature``.
    // See :ref:`the list of features <client_features>` that xDS client may
    // support.
    repeated string client_features = 10;
  
    // Known listening ports on the node as a generic hint to the management server
    // for filtering :ref:`listeners <config_listeners>` to be returned. For example,
    // if there is a listener bound to port 80, the list can optionally contain the
    // SocketAddress ``(0.0.0.0,80)``. The field is optional and just a hint.
    repeated Address listening_addresses = 11;
  }
  